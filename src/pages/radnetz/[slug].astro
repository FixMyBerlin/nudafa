---
export const prerender = true

import LayoutApp from '@components/layouts/LayoutApp.astro'
import { navHeightClassAsNegativeMarginBottom } from '@components/layouts/navbar/Navbar'
import { RadnetzArticleWrapper } from '@components/page_radnetz/RadnetzArticleWrapper'
import { RadnetzImprintPrivacy } from '@components/page_radnetz/RadnetzImprintPrivacy'
import { RadnetzMapConsent } from '@components/page_radnetz/RadnetzMapConsent'
import { RadnetzNavMobileAndDesktop } from '@components/page_radnetz/RadnetzNav'
import type { RadnetzPage } from '@components/page_radnetz/types'
import { getCollection, render } from 'astro:content'
import clsx from 'clsx'
import TextLinkArrow from 'keystatic/components/TextLinkArrow/TextLinkArrow.astro'

const rawPages = await getCollection('bicyclenetworkpages')
const sortedPages = rawPages.sort((a, b) => a.data.order - b.data.order)
const pages: RadnetzPage[] = []

for (const page of sortedPages) {
  const { Content } = await render(page)
  pages.push({
    slug: page.slug,
    menu: page.data.menu,
    order: page.data.order,
    title: page.data.title,
    links: page.data.links,
    sources: page.data.sources,
    Content: Content,
  })
}

export async function getStaticPaths() {
  // This catch-all renders our React components which navigates with client side routing .
  // However the first page load will use the static generated page.
  // Props like the page title will only update on the initial page load or a page reload.
  const rawPages = await getCollection('bicyclenetworkpages')
  return rawPages.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { title } = entry.data
---

<LayoutApp title={`Radnetz: ${title}`}>
  <!-- navHeightClassAsNegativeMarginBottom makes RadnetzNav 'max h-screen minus height of Navbar' possible -->
  <div
    class={clsx('relative h-full w-full md:flex md:flex-row', navHeightClassAsNegativeMarginBottom)}
  >
    <RadnetzNavMobileAndDesktop client:load articleSlug={entry.slug} pages={pages} />
    <RadnetzMapConsent client:load />

    {
      pages.map(({ slug, title, sources, links, Content }) => (
        <RadnetzArticleWrapper
          client:load
          sources={sources}
          articleSlug={slug}
          title={title}
          links={links}
        >
          <Content components={{ TextLinkArrow }} />
        </RadnetzArticleWrapper>
      ))
    }
  </div>
  <RadnetzImprintPrivacy className="md:hidden" />
</LayoutApp>
