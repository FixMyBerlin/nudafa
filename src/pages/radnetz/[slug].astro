---
import LayoutApp from '@components/layouts/LayoutApp.astro'
import {
  navHeightClass,
  navHeightClassAsNegativeMarginBottom,
} from '@components/layouts/navbar/Navbar'
import TextLinkArrow from '@components/links/TextLinkArrow.astro'
import { Radnetz } from '@components/page_radnetz/Radnetz'
import { RadnetzArticleWrapper } from '@components/page_radnetz/RadnetzArticleWrapper'
import { RadnetzNavMobileAndDesktop } from '@components/page_radnetz/RadnetzNav'
import { getCollection } from 'astro:content'
import clsx from 'clsx'

export type Page = {
  slug: string
  menu: string
  order: number
  title: string
  Content: any
  links:
    | {
        display: string
        url: string
      }[]
    | undefined
}

const rawPages = await getCollection('bicyclenetworkpages')
const sortedPages = rawPages.sort((a, b) => a.data.order - b.data.order)
const pages: Page[] = []
for (const page of sortedPages) {
  const { Content } = await page.render()
  pages.push({
    slug: page.slug,
    menu: page.data.menu,
    order: page.data.order,
    title: page.data.title,
    links: page.data.links,
    Content: Content,
  })
}

export async function getStaticPaths() {
  // This catch-all renders our React components which navigates with client side routing .
  // However the first page load will use the static generated page.
  // Props like the page title will only update on the initial page load or a page reload.
  const rawPages = await getCollection('bicyclenetworkpages')
  return rawPages.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { title, links } = entry.data
---

<LayoutApp title={title}>
  <!-- navHeightClassAsNegativeMarginBottom makes RadnetzNav 'max h-screen minus height of Navbar' possible -->
  <div class={clsx('relative flex h-full w-full flex-row', navHeightClassAsNegativeMarginBottom)}>
    <RadnetzNavMobileAndDesktop client:load articleSlug={entry.slug} pages={pages} />
    <Radnetz client:load />
    {
      pages.map(({ slug, title, Content }) => (
        <RadnetzArticleWrapper client:load articleSlug={slug} title={title} links={links}>
          <Content
            components={{
              TextLinkArrow,
            }}
          />
        </RadnetzArticleWrapper>
      ))
    }
  </div>
</LayoutApp>
